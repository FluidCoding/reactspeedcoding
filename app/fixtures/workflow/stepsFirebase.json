{
  "0": { "workflow": "Start", "symbol": "Se", "strategy": "Embed to React", "sequence": 1,
    "img": "img/embed-to-react-w300.jpg" },
  "1": { "workflow": "Start", "symbol": "Se", "strategy": "Embed to React", "sequence": 2,
    "text": "Customize the embed code within target platform to suit your site or app styles and placement." },
  "2": { "workflow": "Start", "symbol": "Se", "strategy": "Embed to React", "sequence": 3,
    "text": "Optionally, parametrize the embed code attributes using React props." },
  "3": { "workflow": "Start", "symbol": "Se", "strategy": "Embed to React", "sequence": 4,
    "text": "Use stateless component as you will most likely not maintain embed UI state locally in your component." },
  "4": { "workflow": "Start", "symbol": "Ss", "strategy": "Sample to React", "sequence": 1,
    "text": "Identify root level component name that represents your sample. Define the basic React component." },
  "5": { "workflow": "Start", "symbol": "Ss", "strategy": "Sample to React", "sequence": 2,
    "text": "Split sample code HTML, CSS, JavaScript into separate files." },
  "6": { "workflow": "Start", "symbol": "Ss", "strategy": "Sample to React", "sequence": 3,
    "text": "Copy HTML DOM that renders the sample UI, into render method of the root level component." },
  "7": { "workflow": "Start", "symbol": "Ss", "strategy": "Sample to React", "sequence": 4,
    "text": "Optionally, replace some of the HTML with existing reusable components you may already have in your app." },
  "8": { "workflow": "Start", "symbol": "Ss", "strategy": "Sample to React", "sequence": 5,
    "text": "Copy CSS into new or existing partial." },
  "9": { "workflow": "Start", "symbol": "Ss", "strategy": "Sample to React", "sequence": 6,
    "text": "The JavaScript, if any, can be copied into /app/public/js folder or, if available over CDN, referred in <script> tag from /app/templates/index_default.html." },
  "10": { "workflow": "Start", "symbol": "Ss", "strategy": "Sample to React", "sequence": 7,
    "text": "Import the new component into your owner component and render in the render() method." },
  "11": { "workflow": "Start", "symbol": "Sc", "strategy": "CSS Library to React", "sequence": 1,
    "text": "Decide how to import or integrate the library within your React app." },
  "12": { "workflow": "Start", "symbol": "Sc", "strategy": "CSS Library to React", "sequence": 2,
    "text": "Identify component(s) from within the library to determine equivalent React components." },
  "13": { "workflow": "Start", "symbol": "Sc", "strategy": "CSS Library to React", "sequence": 3,
    "text": "Optionally, parametrize any style attributes and repeating elements within the CSS library as React component properties." },
  "14": { "workflow": "Start", "symbol": "Sc", "strategy": "CSS Library to React", "sequence": 4,
    "text": "Reuse the React component in place of CSS library elements within your app." },
  "15": { "workflow": "Start", "symbol": "Sa", "strategy": "API to React", "sequence": 1,
    "text": "Identify a public API which can be accessed without authentication requirements and supporting JSON as results data format." },
  "16": { "workflow": "Start", "symbol": "Sa", "strategy": "API to React", "sequence": 2,
    "text": "Optionally, parametrize API endpoints to React properties." },
  "17": { "workflow": "Start", "symbol": "Sa", "strategy": "API to React", "sequence": 3,
    "text": "API resulting JSON can be parametrized as component state. As the results change, we want the state to change, and the component render() to be invoked." },
  "18": { "workflow": "Start", "symbol": "Sa", "strategy": "API to React", "sequence": 4,
    "text": "Render the new component within your app." },
  "19": { "workflow": "Start", "symbol": "Sw", "strategy": "Wireframe to React", "sequence": 1,
    "text": "Scenario ideal for creating custom, non-standard, or complex UI controls." },
  "20": { "workflow": "Start", "symbol": "Sw", "strategy": "Wireframe to React", "sequence": 2,
    "text": "Create wireframe using boxes for elements, layout, composition, and arrows for properties, state, and events." },
  "21": { "workflow": "Start", "symbol": "Sw", "strategy": "Wireframe to React", "sequence": 3,
    "text": "Split individual elements of the wireframe into own style classes. Follow styles structure from wireframe." },
  "22": { "workflow": "Start", "symbol": "Sw", "strategy": "Wireframe to React", "sequence": 4,
    "text": "Use Flexbox to order elements, align element layout, compose element hierarchy." },
  "23": { "workflow": "Start", "symbol": "Sw", "strategy": "Wireframe to React", "sequence": 5,
    "text": "Create HTML/DOM render matching your wireframe, using the new styles." },
  "24": { "workflow": "Start", "symbol": "Sw", "strategy": "Wireframe to React", "sequence": 6,
    "text": "Define properties to handle component data required for each element." },
  "25": { "workflow": "Start", "symbol": "Sw", "strategy": "Wireframe to React", "sequence": 7,
    "text": "Add default property data fixtures if creating a demo component." },
  "26": { "workflow": "Start", "symbol": "Sw", "strategy": "Wireframe to React", "sequence": 8,
    "text": "Create event handler methods and bind these in constructor. Call these methods from element event handlers." },
  "27": { "workflow": "Start", "symbol": "Sw", "strategy": "Wireframe to React", "sequence": 9,
    "text": "Specify component state based on event driven UI state change." },
  "28": { "workflow": "Start", "symbol": "Sw", "strategy": "Wireframe to React", "sequence": 10,
    "text": "Import and render component in an owner component." },
  "29": { "workflow": "Define", "symbol": "Df", "strategy": "Naming conventions", "sequence": 1,
    "img": "img/webpack-workflow-w300.jpg" },
  "30": { "workflow": "Define", "symbol": "Df", "strategy": "Naming conventions", "sequence": 2,
    "text": "Use .jsx extension for React components." },
  "31": { "workflow": "Define", "symbol": "Df", "strategy": "Naming conventions", "sequence": 3,
    "text": "Entry point for app is /app/index.jsx file." },
  "32": { "workflow": "Wire", "symbol": "We", "strategy": "Events", "sequence": 1,
    "text": "As event handlers often manipulate state, they are best defined where state is defined." },
  "33": { "workflow": "Wire", "symbol": "We", "strategy": "Events", "sequence": 2,
    "text": "Define the event handler in outermost owner component." },
  "34": { "workflow": "Wire", "symbol": "We", "strategy": "Events", "sequence": 3,
    "text": "Consume on<Event> property within owned components down the multi-component hierarchy." }
}
